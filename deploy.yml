---
- name: Deploy oracle
  hosts: all
  become: true
  become_user: root
  vars:
    production: false
    volume: sdb
    region: emea
    asm: false
    ora_version: 12C
  vars_files:
    - vars_files/packages
    - vars_files/cifs_packages_el6
    - vars_files/cifs_packages_el7
    - vars_files/asm_packages_el6
    - vars_files/asm_packages_el7
    - vars_files/oracle_drives
    - vars_files/oracle_asm_names
    - vars_files/kernel_parameters
    - vars_files/oracle_limits
    - vars_files/oracle_bin_11G
    - vars_files/oracle_bin_12C
  tasks:

   - name: install subscription manager
     yum: state=present name=subscription-manager
     when: ansible_distribution == 'RedHat'

   - name: register with RedHat
     redhat_subscription:
       username: piotrgbyliczek
       password: "{{ rh_pass }}"
       state: present
       autosubscribe: yes
       force_register: yes
     when: ansible_distribution == 'RedHat'
     ignore_errors: yes

   - name: set kernel parameters
     sysctl:
       name: "{{ item.name }}"
       value: "{{ item.value }}"
       state: present
       reload: yes
     with_items: "{{ kernel_parameters }}"

   - name: adjust tmpfs
     mount:
       src: /dev/shm
       fstype: tmpfs
       path: tmpfs
       opts: "defaults,size=30g"
       state: mounted

   - name: install asm libs (el6)
     yum:
       name: "{{ item }}"
       state: present
     when: ansible_distribution_major_version == '6' and ansible_os_family == 'RedHat' and asm
     with_items: "{{ asm_packages_el6 }}"


   - name: install asm libs (el7)
     yum:
       name: "{{ item }}"
       state: present
     when: ansible_distribution_major_version == '7' and ansible_os_family == 'RedHat' and asm
     with_items: "{{ asm_packages_el7 }}"


   - name: initialize and verify oracleasm (el6)
     shell: oracleasm init
     when: ansible_distribution_major_version == '6' and ansible_os_family == 'RedHat' and asm
     notify: restart_oracleasm_el7

   - name: initialize and verify oracleasm (el7)
     shell: oracleasm init
     when: ansible_distribution_major_version == '7' and ansible_os_family == 'RedHat' and asm
     notify: restart_oracleasm_el7

   - name: create oracle related groups
     group:
       state: present
       name: "{{ item.name }}"
       gid: "{{ item.gid }}"
     with_items:
      - { name: oinstall, gid: 54321 }
      - { name: dba, gid: 54322 }
      - { name: oper, gid: 54323 }
      - { name: asmdba, gid: 54327 }
      - { name: asmoper, gid: 54328 }
      - { name: asmadmin, gid: 54329 }

   - name: Create user oracle
     user:
       name: oracle
       uid: 54321
       group: oinstall
       groups: dba, oper, asmdba, asmoper, asmadmin
       password: $6$gcbS7uAuec83Gp9J$UWOo.8SsgBT0lu73w0EMxNvRUj2HIfRMomrph50MNKK5U9thdfN4PKzzT2nGXLP9mo9hoqUTQhohiTfvQ2IfF1
       state: present

   - name: set user limits
     pam_limits:
       limit_item: "{{ item.name }}"
       limit_type: "{{ item.type }}"
       value: "{{ item.value | int }}"
       domain: "{{ item.domain }}"
       #comment: "{{ item.comment }}"
     with_items: "{{ oracle_limits }}"

   - name: check if {{ volume }}1 partition is present
     stat: path=/dev/{{ volume }}1
     register: partition_check

   - debug: msg="{{ partition_check }}"

   - name: create {{ volume }}1 partition
     parted:
       device: /dev/{{ volume }}
       label: gpt
       state: present
       number: 1
       name: 1
       flags: [ lvm ]
       part_start: 0%
       part_end: 100%
     tags: lvm
     when: partition_check.stat.exists == 'false'
     register: partition

   - debug: msg="{{ partition }}"

   - name: create LVM group vgoracle
     lvg:
       vg: vgoracle
       pvs: /dev/{{ volume }}1
     when: partition_check.stat.exists == 'false'

     tags: lvm
   - name: create LVM volume lvoracle1
     lvol:
       vg: vgoracle
       lv: lvoracle1
       size: 60%FREE
     tags: lvm
     when: partition_check.stat.exists == 'false'

   - name: create lvoracle1 filesystem
     filesystem:
       fstype: ext4
       dev: /dev/vgoracle/lvoracle1
     tags: lvm
     when: partition_check.stat.exists == 'false'

   - name: create folder for lvoracle1 volume
     file:
       path: /u01
       state: directory
       owner: oracle
       group: oinstall
       mode: 0775
     tags: lvm, mount
     when: partition_check.stat.exists == 'false'

   - name: create mount point for lvoracle1
     mount:
       src: /dev/vgoracle/lvoracle1
       name: /u01
       fstype: ext4
       state: mounted
     tags: lvm,mount
     when: partition_check.stat.exists == 'false'

   - name: ensure u01 folder permissions after mount
     file:
       path: /u01
       state: directory
       owner: oracle
       group: oinstall
       mode: 0775
     tags: lvm, mount

   - name: create /u01/media folder
     file:
       path: "{{ item }}"
       state: directory
       owner: oracle
       group: oinstall
       mode: 0775
     with_items:
       - /u01/media
       - /u01/app/oracle/product/12.1.0.2/dbhome_1
       - /u01/app/oracle/12.1.0.2/grid
     tags: lvm, mount

   - name: enable rhui repositories
     shell: yum-config-manager --enable rhui-{{ region }}-rhel-server-extras rhui-{{ region }}-rhel-server-optional

   - name: install required packages
     yum:
       name: "{{ item }}"
       state: present
     with_items:
      - "{{ packages }}"

   - name: install samba/cifs related packages (el6)
     yum:
       name: "{{ item }}"
       state: present
     with_items:
      - "{{ cifs_packages_el6 }}"
     when: production and ansible_distribution_major_version == '6' and ansible_os_family == 'RedHat'

   - name: install samba/cifs related packages (el7)
     yum:
       name: "{{ item }}"
       state: present
     with_items:
      - "{{ cifs_packages_el7 }}"
     when: production and ansible_distribution_major_version == '7' and ansible_os_family == 'RedHat'


   - name: create mount point for cifs share
     mount:
       src: //10.1.0.235/Data
       name: /DataShare
       fstype: cifs
       opts: _netdev,username=CIFS,password=Oracle123,nolock,dir_mode=0777,file_mode=0777
       state: mounted
     when: production
     ignore_errors: true

   - name: create /DataShare/oraarch/ORCLDB1 folder
     file:
       path: /DataShare/oraarch/ORCLDB1
       state: directory
       owner: oracle
       group: oinstall
       mode: 0775
     when: production

   - name: add oracle binary path to PATH
     lineinfile:
       path: ~/.bash_profile
       line: PATH=$PATH:$HOME/bin:/u01/app/oracle/12.1.0.2/grid/bin

   - name: set environment variables for oracle user
     become: yes
     become_user: oracle
     blockinfile:
       path: ~/.bash_profile
       block: "{{ lookup('file', 'files/oracle_bash_profile') }}"
       insertafter: EOF

   - name: create partition on oracle drives
     parted:
       device: /dev/{{ item }}
       label: gpt
       state: present
       number: 1
       part_start: 0%
       part_end: 100%
       part_type: primary
     with_items: "{{ oracle_drives }}"
     when: asm

   - name: add oracleasm drives (el6)
     shell: oracleasm createdisk {{ item.1 }} /dev/{{item.0 }}1
     notify: restart_oracleasm_el6
     when: production and ansible_distribution_major_version == '6' and ansible_os_family == 'RedHat' and asm
     with_together:
      - "{{ oracle_drives }}"
      - "{{ oracle_asm_names }}"

   - name: add oracleasm drives (el7)
     shell: oracleasm createdisk {{ item.1 }} /dev/{{item.0 }}1
     notify: restart_oracleasm_el7
     when: production and ansible_distribution_major_version == '7' and ansible_os_family == 'RedHat' and asm
     with_together:
      - "{{ oracle_drives }}"
      - "{{ oracle_asm_names }}"


   - name: check oracle drives
     shell: oracleasm listdisks
     register: asm_drives
     when: asm

   - debug: msg="{{ asm_drives }}"
     when: asm

   - name: download oracle 11G archives
     get_url:
       url: "{{ item }}"
       dest: /u01/media
     with_items: "{{ oracle_bin_11G }}"
     when: ora_version == '11G'

   - name: download oracle 12G archives
     get_url:
       url: "{{ item }}"
       dest: /u01/media
     with_items: "{{ oracle_bin_12C }}"
     when: ora_version == '12C'

   - name: get oracle {{ ora_version }} filenames
     find:
       paths: /u01/media
       file_type: file
       contains: 'zip'
     register: ora_files

   - name: extract oracle {{ ora_version }} binaries from archives
     unarchive:
       remote_src: yes
       src: "{{ item.path }}"
       dest: /u01/media
     with_items: "{{ ora_files.files }}"
     when: extract

   - name: disable zeroconf (el6)
     lineinfile:
       line: NOZEROCONF=true
       path: /etc/sysconfig/network-scripts/ifcfg-eth0
       state: present
     when: ansible_distribution_major_version == '6' and ansible_os_family == 'RedHat'
     notify: restart_network_el6

   - name: disable zeroconf (el7)
     lineinfile:
       line: NOZEROCONF=true
       path: /etc/sysconfig/network-scripts/ifcfg-eth0
       state: present
     when: ansible_distribution_major_version == '7' and ansible_os_family == 'RedHat'
     notify: restart_network_el7

  handlers:
   - name: restart_oracleasm_el6
     service:
       name: oracleasm
       state: restarted

   - name: restart_network_el6
     service:
       name: network
       state: restarted

   - name: restart_oracleasm_el7
     systemd:
       name: oracleasm.service
       state: restarted

   - name: restart_network_el7
     systemd:
       name: network
       state: restarted

